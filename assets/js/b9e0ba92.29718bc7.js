"use strict";(self.webpackChunkenviro_botics_summer_school=self.webpackChunkenviro_botics_summer_school||[]).push([[9537],{3970:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"tutorials/build ROS nodes","title":"Build your own ROS nodes","description":"To control the BlueBoat in the simulation (e.g., moving it to a certain position), you\u2019ll typically write custom ROS 2 nodes. These nodes allow you to subscribe to sensor data, process it (e.g., with a control algorithm), and publish commands to actuators.","source":"@site/docs/tutorials/build ROS nodes.md","sourceDirName":"tutorials","slug":"/tutorials/build ROS nodes","permalink":"/EnviroBotics-Docs/docs/tutorials/build ROS nodes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build ROS nodes","title":"Build your own ROS nodes"},"sidebar":"tutorialSidebar","previous":{"title":"Starting simulation","permalink":"/EnviroBotics-Docs/docs/tutorials/start simulation"},"next":{"title":"Adjust you controller","permalink":"/EnviroBotics-Docs/docs/tutorials/controller node"}}');var t=s(4848),r=s(8453);const i={id:"build ROS nodes",title:"Build your own ROS nodes"},l="Writing custom ROS 2 nodes",d={},a=[{value:"1 What is a ROS 2 node?",id:"1-what-is-a-ros-2-node",level:2},{value:"2 Build your own nodes",id:"2-build-your-own-nodes",level:2},{value:"1 Structure of a Simple Node (Python)",id:"1-structure-of-a-simple-node-python",level:3},{value:"2 Creating a ROS 2 Python Package",id:"2-creating-a-ros-2-python-package",level:3},{value:"3 Building and Running your node",id:"3-building-and-running-your-node",level:3},{value:"4 Customize your node:",id:"4-customize-your-node",level:3},{value:"\ud83d\udea6 What this Node Does",id:"-what-this-node-does",level:3},{value:"\ud83e\udde0 Core Concepts",id:"-core-concepts",level:3},{value:"\ud83d\udd01 Control Logic",id:"-control-logic",level:3},{value:"\ud83c\udfaf Fixed Goal",id:"-fixed-goal",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"writing-custom-ros-2-nodes",children:"Writing custom ROS 2 nodes"})}),"\n",(0,t.jsxs)(n.p,{children:["To control the BlueBoat in the simulation (e.g., moving it to a certain position), you\u2019ll typically write ",(0,t.jsx)(n.strong,{children:"custom ROS 2 nodes"}),". These nodes allow you to subscribe to sensor data, process it (e.g., with a control algorithm), and publish commands to actuators."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-what-is-a-ros-2-node",children:"1 What is a ROS 2 node?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"ROS 2 node"})," is a single, executable program in a distributed robotic system that communicates with other nodes using topics, services, or actions."]}),"\n",(0,t.jsx)(n.p,{children:"Each node can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Subscribe to topics (receive data),"}),"\n",(0,t.jsx)(n.li,{children:"Publish to topics (send data),"}),"\n",(0,t.jsx)(n.li,{children:"Provide services (blocking calls),"}),"\n",(0,t.jsx)(n.li,{children:"Use parameters (for tuning),"}),"\n",(0,t.jsx)(n.li,{children:"And more."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Nodes are usually written in ",(0,t.jsx)(n.strong,{children:"Python"})," or ",(0,t.jsx)(n.strong,{children:"C++"}),". For simplicity, we will use ",(0,t.jsx)(n.strong,{children:"Python"})," in our Summer School."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-build-your-own-nodes",children:"2 Build your own nodes"}),"\n",(0,t.jsx)(n.h3,{id:"1-structure-of-a-simple-node-python",children:"1 Structure of a Simple Node (Python)"}),"\n",(0,t.jsx)(n.p,{children:"Below is a minimal ROS 2 node in Python that logs a message once per second."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# my_node.py\nimport rclpy\nfrom rclpy.node import Node\n\nclass MyNode(Node):\n    def __init__(self):\n        super().__init__('my_node')\n        self.create_timer(1.0, self.timer_callback)\n\n    def timer_callback(self):\n        self.get_logger().info('Hello from my_node!')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"To run this, place the file inside a ROS 2 Python package."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2-creating-a-ros-2-python-package",children:"2 Creating a ROS 2 Python Package"}),"\n",(0,t.jsx)(n.p,{children:"To create your own package for BlueBoat control, go to the src Directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\ncd ~/ros2_ws/src\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"and run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\nros2 pkg create --build-type ament_python blueboat_controller\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then add your Python node (e.g., pid_controller.py) to the blueboat_controller/blueboat_controller directory and update setup.py to install it."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-building-and-running-your-node",children:"3 Building and Running your node"}),"\n",(0,t.jsx)(n.p,{children:"Build:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\ncolcon build\nsource install/setup.bash\n"})}),"\n",(0,t.jsx)(n.p,{children:"and run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\nros2 run blueboat_controller pid_controller\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will start your custom node."}),"\n",(0,t.jsx)(n.h3,{id:"4-customize-your-node",children:"4 Customize your node:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom nav_msgs.msg import Odometry\nfrom pymavlink import mavutil\nimport math\nimport time\n\n\nclass PID:\n    def __init__(self, kp, ki, kd):\n        self.kp, self.ki, self.kd = kp, ki, kd\n        self.prev_error = 0.0\n        self.integral = 0.0\n        self.last_time = time.time()\n\n    def compute(self, error):\n        now = time.time()\n        dt = now - self.last_time\n        self.last_time = now\n\n        self.integral += error * dt\n        derivative = (error - self.prev_error) / dt if dt > 0 else 0.0\n        self.prev_error = error\n\n        return self.kp * error + self.ki * self.integral + self.kd * derivative\n\n\nclass SimplePIDNode(Node):\n    def __init__(self):\n        super().__init__('simple_blueboat_pid')\n\n        self.goal = [3.0, 2.0]  # Feste Zielkoordinate\n\n        # PID-Regler\n        self.heading_pid = PID(3.0, 0.0, 0.3)\n        self.speed_pid = PID(0.2, 0.0, 0.5)\n\n        # MAVLink Verbindung aufbauen\n        self.master = mavutil.mavlink_connection('udp:127.0.0.1:14550')\n        self.master.wait_heartbeat()\n        self.get_logger().info(\"Verbunden mit MAVLink\")\n\n        # ROS Subscriber\n        self.create_subscription(Odometry, '/model/blueboat/odometry', self.odom_callback, 10)\n\n    def odom_callback(self, msg):\n        pos = msg.pose.pose.position\n        yaw = self.get_yaw(msg.pose.pose.orientation)\n\n        dx = self.goal[0] - pos.x\n        dy = self.goal[1] - pos.y\n        distance = math.hypot(dx, dy)\n\n        target_angle = math.atan2(dy, dx)\n        heading_error = (target_angle - yaw + math.pi) % (2 * math.pi) - math.pi\n\n        steer_cmd = self.heading_pid.compute(heading_error)\n        speed_cmd = self.speed_pid.compute(distance)\n\n        # Ziel erreicht?\n        if distance < 0.3:\n            speed_cmd = -0.2  # leicht r\xfcckw\xe4rts bremsen\n\n        pwm_left, pwm_right = self.compute_pwm(speed_cmd, steer_cmd)\n        self.send_pwm(pwm_left, pwm_right)\n\n        self.get_logger().info(f\"Distanz: {distance:.2f} m | Heading Error: {math.degrees(heading_error):.1f}\xb0\")\n\n    def compute_pwm(self, speed_cmd, steer_cmd):\n        base_pwm = 1500\n        power = int(400 * max(min(speed_cmd, 1.0), -1.0))\n        turn = int(400 * max(min(steer_cmd, 1.0), -1.0))\n\n        pwm_left = max(min(base_pwm - power - turn, 1900), 1100)\n        pwm_right = max(min(base_pwm - power + turn, 1900), 1100)\n        return pwm_left, pwm_right\n\n    def send_pwm(self, left, right):\n        self.master.mav.rc_channels_override_send(\n            self.master.target_system,\n            self.master.target_component,\n            left, 0, right, 0,\n            0, 0, 0, 0\n        )\n\n    def get_yaw(self, q):\n        siny_cosp = 2 * (q.w * q.z + q.x * q.y)\n        cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z)\n        return math.atan2(siny_cosp, cosy_cosp)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = SimplePIDNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        node.destroy_node()\n        rclpy.shutdown()\n\n"})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Explanation of the simple BlueBoat PID Node"}),(0,t.jsxs)(n.p,{children:["This minimal ROS 2 node drives the simulated BlueBoat toward a ",(0,t.jsx)(n.strong,{children:"fixed target position"})," using a basic PID controller for both heading and speed."]}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h3,{id:"-what-this-node-does",children:"\ud83d\udea6 What this Node Does"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Subscribes to the boat's ",(0,t.jsx)(n.strong,{children:"odometry"})," in simulation"]}),"\n",(0,t.jsxs)(n.li,{children:["Computes the ",(0,t.jsx)(n.strong,{children:"distance"})," and ",(0,t.jsx)(n.strong,{children:"heading angle"})," to the fixed target"]}),"\n",(0,t.jsxs)(n.li,{children:["Uses ",(0,t.jsx)(n.strong,{children:"PID control"})," to calculate motor signals"]}),"\n",(0,t.jsxs)(n.li,{children:["Sends ",(0,t.jsx)(n.strong,{children:"PWM commands via MAVLink"})," to steer and drive the boat"]}),"\n"]}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h3,{id:"-core-concepts",children:"\ud83e\udde0 Core Concepts"}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Component"}),(0,t.jsx)(n.th,{children:"Purpose"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"PID"})," class"]}),(0,t.jsx)(n.td,{children:"Calculates control output using proportional, integral, and derivative parts"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"odom_callback()"})}),(0,t.jsx)(n.td,{children:"Reacts to new position data from Gazebo"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"compute_pwm()"})}),(0,t.jsx)(n.td,{children:"Converts speed and steering into left/right motor commands"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"send_pwm()"})}),(0,t.jsx)(n.td,{children:"Sends motor signals directly via MAVLink"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"get_yaw()"})}),(0,t.jsx)(n.td,{children:"Extracts boat orientation from quaternion"})]})]})]}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h3,{id:"-control-logic",children:"\ud83d\udd01 Control Logic"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Compute distance and heading error to the target"}),"\n",(0,t.jsxs)(n.li,{children:["Use two PID controllers:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["One for ",(0,t.jsx)(n.strong,{children:"heading correction"})]}),"\n",(0,t.jsxs)(n.li,{children:["One for ",(0,t.jsx)(n.strong,{children:"speed adjustment"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Translate results into PWM values"}),"\n",(0,t.jsx)(n.li,{children:"Command motors via MAVLink"}),"\n"]}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h3,{id:"-fixed-goal",children:"\ud83c\udfaf Fixed Goal"}),(0,t.jsx)(n.p,{children:"The goal is defined statically in the code:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"self.goal = [3.0, 2.0]\n"})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"next-steps",children:"Next Steps"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var o=s(6540);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);