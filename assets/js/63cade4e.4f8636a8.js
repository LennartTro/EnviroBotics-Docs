"use strict";(self.webpackChunkenviro_botics_summer_school=self.webpackChunkenviro_botics_summer_school||[]).push([[198],{6914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorials/transition to hardware","title":"Transition to Hardware","description":"After testing and developing your BlueBoat controller in simulation, it\u2019s time to bring your setup into the real world. This page walks you through the essential steps for running your controller node on real hardware, including how to connect to the vehicle, arm it, test the motors, and send waypoint commands.","source":"@site/docs/tutorials/transition to hardware.md","sourceDirName":"tutorials","slug":"/tutorials/transition to hardware","permalink":"/EnviroBotics-Docs/docs/tutorials/transition to hardware","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"transition to hardware","title":"Transition to Hardware"},"sidebar":"tutorialSidebar","previous":{"title":"Creating a BlueBoat Planner Node","permalink":"/EnviroBotics-Docs/docs/tutorials/planner node"},"next":{"title":"Troubleshooting","permalink":"/EnviroBotics-Docs/docs/troubleshooting/common-issues"}}');var r=t(4848),o=t(8453);const i={id:"transition to hardware",title:"Transition to Hardware"},a="Transition to Hardware",l={},c=[{value:"Accessing the BlueOS Interface on Your BlueBoat",id:"accessing-the-blueos-interface-on-your-blueboat",level:2},{value:"Prepare the connection",id:"prepare-the-connection",level:3},{value:"Open the web interface",id:"open-the-web-interface",level:3},{value:"Welcome to BlueOS",id:"welcome-to-blueos",level:3},{value:"Control the BlueBoat via MAVROS",id:"control-the-blueboat-via-mavros",level:2},{value:"Why UDP is used in MAVLink communication",id:"why-udp-is-used-in-mavlink-communication",level:3},{value:"Option A \u2014 Direct control (RC Override) (works like the simulation; powerful, but not recommended for general use)",id:"option-a--direct-control-rc-override-works-like-the-simulation-powerful-but-not-recommended-for-general-use",level:2},{value:"Option B \u2014 Autopilot GUIDED mode (recommended)",id:"option-b--autopilot-guided-mode-recommended",level:2},{value:"Temperature measurement",id:"temperature-measurement",level:2},{value:"Calling the Service:",id:"calling-the-service",level:3},{value:"Listen to /temperature-Topic:",id:"listen-to-temperature-topic",level:3},{value:"Use the winch system:",id:"use-the-winch-system",level:2},{value:"SetDepth Action (/stepper/set_depth):",id:"setdepth-action-stepperset_depth",level:3},{value:"Receive the feedback:",id:"receive-the-feedback",level:3},{value:"You may need additional the interfaces (please ask for it and build again)",id:"you-may-need-additional-the-interfaces-please-ask-for-it-and-build-again",level:3},{value:"TODO: Build your own node (e.g. temperature_subscriber.py) within the blueboat_guided-package.",id:"todo-build-your-own-node-eg-temperature_subscriberpy-within-the-blueboat_guided-package",level:3},{value:"Start the measurement run",id:"start-the-measurement-run",level:2},{value:"What each state does (and the triggers)",id:"what-each-state-does-and-the-triggers",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"transition-to-hardware",children:"Transition to Hardware"})}),"\n",(0,r.jsx)(n.p,{children:"After testing and developing your BlueBoat controller in simulation, it\u2019s time to bring your setup into the real world. This page walks you through the essential steps for running your controller node on real hardware, including how to connect to the vehicle, arm it, test the motors, and send waypoint commands."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"The process is similar to what you've done in simulation \u2014 just with real data and a real boat now."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-blueos-interface-on-your-blueboat",children:"Accessing the BlueOS Interface on Your BlueBoat"}),"\n",(0,r.jsx)(n.h3,{id:"prepare-the-connection",children:"Prepare the connection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Make sure the BlueBoat and BaseStation are powered on and paired."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Connect the BaseStation to your computer."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Please also pay attention to the notes and instructions on the official Blue Robotics pages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://bluerobotics.com/learn/blueboat-software-setup/",children:"BlueBoat Software Setup"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://bluerobotics.com/learn/blueboat-operators-guide/",children:"BlueBoat Operator\u2019s Guide"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"open-the-web-interface",children:"Open the web interface"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Launch your preferred web browser (Chrome, Firefox, Edge, etc.)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the address bar, type ",(0,r.jsx)(n.strong,{children:"192.168.2.2"})," or ",(0,r.jsx)(n.strong,{children:"blueos.local"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"welcome-to-blueos",children:"Welcome to BlueOS"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You will see the BlueOS home screen."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If the page does not load, check that the BaseStation is connected and powered, and that your computer is using the correct network."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You should see a ",(0,r.jsx)(n.strong,{children:"Heartbeat"})," coming in from the vehicle."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If no heartbeat is detected, check cables, power supply, and endpoint configuration... or ask."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"control-the-blueboat-via-mavros",children:"Control the BlueBoat via MAVROS"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Once you have access to the BlueOS interface and the BaseStation is connected:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open a terminal on your computer."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start the MAVROS node and connect to the boat using UDP:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run mavros mavros_node --ros-args -p fcu_url:=udp://@192.168.2.2:14600 -p system_id:=255 -p component_id:=190 -p tgt_system:=1 -p tgt_component:=1\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Required (but actually already installed - so skippable): MAVROS"}),(0,r.jsxs)(n.p,{children:["Make sure ",(0,r.jsx)(n.code,{children:"mavros"})," and related dependencies are installed on your system:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install ros-${ROS_DISTRO}-mavros ros-${ROS_DISTRO}-mavros-extras\nsudo apt install ros-${ROS_DISTRO}-mavros-msgs\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\nsudo apt install geographiclib-tools\nsudo geographiclib-get-geoids egm96-5\nsudo geographiclib-get-gravity egm2008\nsudo geographiclib-get-magnetic wmm2020\n\n"})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the connection is successful, MAVROS will begin showing messages from the BlueBoat\u2019s autopilot."}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)("summary",{children:" What is UPD and why do we use UDP?"}),"\nWhat is UDP?"]}),(0,r.jsx)(n.p,{children:"UDP (User Datagram Protocol) is a fast and lightweight network protocol used for sending data between systems on the same network."}),(0,r.jsx)(n.p,{children:"In your project, we use it to connect the MAVROS node (running on your computer) to the ArduPilot firmware (running on the boat) using MAVLink."}),(0,r.jsx)(n.h3,{id:"why-udp-is-used-in-mavlink-communication",children:"Why UDP is used in MAVLink communication"}),(0,r.jsx)(n.p,{children:"\u2705 Low latency \u2014 data is sent without delay"}),(0,r.jsx)(n.p,{children:"\u2705 Simple protocol \u2014 minimal overhead"}),(0,r.jsx)(n.p,{children:"\u274c No delivery guarantees \u2014 packets may be lost or arrive out of order"}),(0,r.jsx)(n.p,{children:"This is acceptable in robotics, where fresh data is more important than guaranteed delivery."})]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"(Recommended) Verify the link:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic echo -n 1 /mavros/state\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"For GUIDED/global setpoints, make sure the boat has a GPS fix (\u22652D):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic echo -n 3 /mavros/global_position/raw/fix\n"})}),"\n",(0,r.jsx)(n.p,{children:"Latitude/longitude must be non-zero and status.status >= 0."}),"\n",(0,r.jsx)(n.h2,{id:"option-a--direct-control-rc-override-works-like-the-simulation-powerful-but-not-recommended-for-general-use",children:"Option A \u2014 Direct control (RC Override) (works like the simulation; powerful, but not recommended for general use)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Arm in MANUAL"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Before the boat can move, you need to switch it to MANUAL mode and arm it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'\nros2 service call /mavros/set_mode mavros_msgs/srv/SetMode "{custom_mode: \'MANUAL\'}"\nros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool "{value: true}"\n\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Quick motor test"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Move the motors forward"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub -r 10 /mavros/rc/override mavros_msgs/msg/OverrideRCIn "{channels: [1600, 0, 1600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Stop all motor movement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub -r 10 /mavros/rc/override mavros_msgs/msg/OverrideRCIn "{channels: [1500, 0, 1500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Run your controller node"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Make sure the blueboat_control package is installed on your system and sourced via:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"source ~/gz_ws/install/setup.bash\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now launch your real-time controller node for the BlueBoat:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run blueboat_control asv_pid_rc   --ros-args -p arrival_radius_m:=1.5              -p invert_throttle:=false              -p invert_steer:=false\n\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Send a target waypoint to your controller"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can now send the boat to a specific location:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub --once /asv/target geometry_msgs/msg/Point "{x: 48.28407529304395, y: 11.605825035798238, z: 0.0}"\n\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Emergency stop / resumen"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If something goes wrong or you want to stop movement immediately, publish a stop signal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'\nros2 topic pub -r 5 /asv/stop std_msgs/msg/Bool "data: true"\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"to continue, send:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'\nros2 topic pub -r 5 /asv/stop std_msgs/msg/Bool "data: false"\n\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsx)(n.p,{children:"With RC Override you are bypassing the autopilot regulator. You\u2019re responsible for heading/speed control, failsafes, and tuning."})]}),"\n",(0,r.jsx)(n.h2,{id:"option-b--autopilot-guided-mode-recommended",children:"Option B \u2014 Autopilot GUIDED mode (recommended)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Switch to GUIDED and arm"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 service call /mavros/set_mode mavros_msgs/srv/SetMode "{custom_mode: \'HOLD\'}"\nros2 service call /mavros/set_mode mavros_msgs/srv/SetMode "{base_mode: 0, custom_mode: \'GUIDED\'}"\nros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool "{value: true}"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Send periodic global position setpoints (2 Hz)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub -r 2 /mavros/setpoint_raw/global mavros_msgs/msg/GlobalPositionTarget \\\n"{coordinate_frame: 6,  # MAV_FRAME_GLOBAL_INT\n  type_mask: 0b0000111111111000,  # position-only\n  latitude: 48.284812,\n  longitude: 11.606132,\n  altitude: 0.0}"\n'})}),"\n",(0,r.jsx)(n.p,{children:"or use, as an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub -r 2 /mavros/setpoint_position/global mavros_msgs/msg/GlobalPositionTarget \\\n"{latitude: 48.284812, longitude: 11.606132, altitude: 0.0}"\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Setpoints must be sent repeatedly (e.g., 2 Hz)."})}),"\n",(0,r.jsx)(n.p,{children:"We will use guided mode later to approach the measuring points on the water."}),"\n",(0,r.jsx)(n.h2,{id:"temperature-measurement",children:"Temperature measurement"}),"\n",(0,r.jsx)(n.h3,{id:"calling-the-service",children:"Calling the Service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service call /read_temp std_srvs/srv/Trigger {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"listen-to-temperature-topic",children:"Listen to /temperature-Topic:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic echo /temperature\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"If not already done: Switch to continuous publishing - otherwise it's a service."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param set /temperature_sensor_node publish_temperature true\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"use-the-winch-system",children:"Use the winch system:"}),"\n",(0,r.jsx)(n.h3,{id:"setdepth-action-stepperset_depth",children:"SetDepth Action (/stepper/set_depth):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 action send_goal /stepper/set_depth stepper_interfaces/action/SetDepth "target_depth_cm: 15"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"receive-the-feedback",children:"Receive the feedback:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 action feedback /stepper/set_depth stepper_interfaces/action/SetDepth\n"})}),"\n",(0,r.jsx)(n.h3,{id:"you-may-need-additional-the-interfaces-please-ask-for-it-and-build-again",children:"You may need additional the interfaces (please ask for it and build again)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select stepper_interfaces blueboat_guided --merge-install\n"})}),"\n",(0,r.jsx)(n.h3,{id:"todo-build-your-own-node-eg-temperature_subscriberpy-within-the-blueboat_guided-package",children:"TODO: Build your own node (e.g. temperature_subscriber.py) within the blueboat_guided-package."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Check out the previous tutorials or ask how to create another node in the package."}),"\n",(0,r.jsx)(n.li,{children:"Save each received temperature message to a .txt file for logging purposes."}),"\n",(0,r.jsx)(n.li,{children:"In the next step, include the current GPS position along with each temperature entry."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can start with this example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# file: temperature_logger_node.py\n#\n# Basic ROS 2 Node structure (Python)\n# - Imports\n# - Node class\n# - main() function\n# - Script entry point\n#\n# TODOs show where to add code later (subscribers, callbacks, file handling, etc.)\n#!/usr/bin/env python3\nimport rclpy\nfrom rclpy.node import Node\n# Import message types you\u2019ll use later\n# e.g. from std_msgs.msg import String\n\n\nclass TemperatureLogger(Node):\n    """A simple ROS2 node that will later subscribe to temperature data\n    and write it to a text file (and later also include GPS)."""\n\n    def __init__(self):\n        # Always call the base class constructor first\n        super().__init__(\'temperature_logger\')\n\n        # TODO: Create a subscriber for /temperature\n        # self.subscription = self.create_subscription(\n        #     String, \'/temperature\', self.temperature_callback, 10\n        # )\n\n        # TODO: Open a text file for writing temperature data\n\n        # TODO: (Later) Add another subscriber for GPS data\n\n        self.get_logger().info(\'TemperatureLogger node started.\')\n\n    # ---------------------------------------------------------------------\n    # TODO: Add your callback functions here\n    # These are called automatically whenever a new message is received.\n    # Example:\n    #\n    # def temperature_callback(self, msg):\n    #     self.get_logger().info(f\'Received temperature: {msg.data}\')\n    #\n    # ---------------------------------------------------------------------\n\n\ndef main(args=None):\n    """Main entry point for the node."""\n    rclpy.init(args=args)        # Initialize the ROS client library\n    node = TemperatureLogger()   # Create the node instance\n    rclpy.spin(node)             # Keep it running (wait for messages)\n    node.destroy_node()          # Cleanup before shutdown\n    rclpy.shutdown()             # Shutdown ROS\n\n\n# This ensures the node runs when the script is executed directly\nif __name__ == \'__main__\':\n    main()\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"For further help, please take a look here:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.html",children:"https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.html"})}),"\n",(0,r.jsx)(n.p,{children:"A little helpful tip:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:' self.subscription = self.create_subscription(\n            String,\n            \'/temperature\',\n            self.temperature_callback,\n            10\n        )\n\ndef temperature_callback(self, msg):\n      """This function is called whenever a new message is received on /temperature."""\n      self.get_logger().info(f\'Received temperature: {msg.data}\')\n\n\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"start-the-measurement-run",children:"Start the measurement run"}),"\n",(0,r.jsx)(n.p,{children:"Please adjust the measuring positions and depths. Please do not place the positions too far away from the BaseStation. Ensure that the last position in your list is (48.284864, 11.606720, 0.0) - Otherwise, we'll have trouble getting the boat out of the water =)\nThen rebuild the node and source again:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select stepper_interfaces blueboat_guided --merge-install\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the node:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run blueboat_guided guided_measurement\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is a brief overview of what happens in this node:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"          +-----------------------------------------------+\n          |               dist > arrival_radius            |\n          v                                               |\n       NAVIGATE ------------------------------------------+\n          | dist <= radius (waypoint reached)\n          v\n       LOWERING --(action rejected/error)--\x3e NAVIGATE\n          |\n          | (SetDepth finished & success)\n          v\n       MEASURING --(temp service response)--\x3e RAISING\n          |                             |\n          |                             v\n          |                     (action rejected/error)\n          |                             |\n          +----------------------------\x3eHOLD\n                                        |\n                                        | (SetDepth success/fail)\n                                        v\n                                      HOLD\n                                        |\n                                        | hold elapsed & more waypoints\n                                        v\n                                     NAVIGATE\n                                        |\n                                        | hold elapsed & no waypoints left\n                                        v\n                                 Mission complete\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"what-each-state-does-and-the-triggers",children:"What each state does (and the triggers)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NAVIGATE"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Loop behavior: At 5 Hz it always publishes the current target GeoPoseStamped to /mavros/setpoint_position/global (reliable QoS) so GUIDED keeps a fresh setpoint stream."}),"\n",(0,r.jsx)(n.p,{children:"Transition: When Haversine distance to the active waypoint \u2264 3 m, it switches to LOWERING and sends a SetDepth action goal with target_depth_cm = 20."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"LOWERING"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Purpose: Wait for the stepper action (lower winch)."}),"\n",(0,r.jsx)(n.p,{children:"Success \u2192 MEASURING."}),"\n",(0,r.jsx)(n.p,{children:"Failure paths \u2192 NAVIGATE: goal rejected, server unavailable, exception, or result not successful."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MEASURING"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"One-shot: Guards with a measured flag so it only triggers once per waypoint."}),"\n",(0,r.jsx)(n.p,{children:"Action: Calls the /read_temp Trigger service and logs the returned temperature if successful."}),"\n",(0,r.jsx)(n.p,{children:"Next: Regardless of service success/failure, immediately commands RAISING (winch to 0 cm)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RAISING"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Purpose: Lift the winch to surface (SetDepth goal 0)."}),"\n",(0,r.jsx)(n.p,{children:"Next: Whether the action succeeds, fails, or is rejected/unavailable, it proceeds to HOLD (after logging)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HOLD"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Purpose: Stay on station for 10 s while continuing to stream the waypoint setpoint."}),"\n",(0,r.jsx)(n.p,{children:"Next: After the hold duration:"}),"\n",(0,r.jsx)(n.p,{children:"If more waypoints remain: increment wp_idx, clear the measured flag, go back to NAVIGATE."}),"\n",(0,r.jsx)(n.p,{children:"If this was the last waypoint: log completion \u2192 conceptual FINISHED; subsequent ticks exit early."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FINISHED (conceptual)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Condition: wp_idx >= len(waypoints). The tick logs \u201cMission abgeschlossen.\u201d and returns."}),"\n",(0,r.jsx)(n.p,{children:"Continue refining your system and testing it safely in controlled environments before heading out to the lake."}),"\n",(0,r.jsx)(n.p,{children:"Next step: Build a control node and a planner node to approach different positions, start measurements at each point, and publish the temperature."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);