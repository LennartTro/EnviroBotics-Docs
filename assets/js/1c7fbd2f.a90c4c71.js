"use strict";(self.webpackChunkenviro_botics_summer_school=self.webpackChunkenviro_botics_summer_school||[]).push([[7426],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},8965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/planner node","title":"Creating a BlueBoat Planner Node","description":"While the controller node ensures that the BlueBoat can navigate to a single target position, it does not manage missions or sequences of goalsIn real-world scenarios, however, we often want our robot to:","source":"@site/docs/tutorials/planner node.md","sourceDirName":"tutorials","slug":"/tutorials/planner node","permalink":"/EnviroBotics-Docs/docs/tutorials/planner node","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"planner node","title":"Creating a BlueBoat Planner Node"},"sidebar":"tutorialSidebar","previous":{"title":"Adjust you controller","permalink":"/EnviroBotics-Docs/docs/tutorials/controller node"},"next":{"title":"Transition to Hardware","permalink":"/EnviroBotics-Docs/docs/tutorials/transition to hardware"}}');var s=t(4848),a=t(8453);const o={id:"planner node",title:"Creating a BlueBoat Planner Node"},l="BlueBoat Planner Node",i={},c=[{value:"Create a new ROS 2 package",id:"create-a-new-ros-2-package",level:2},{value:"Package Structure",id:"package-structure",level:3},{value:"Planner Node Function",id:"planner-node-function",level:2},{value:"planner_node.py",id:"planner_nodepy",level:3},{value:"Run the Node",id:"run-the-node",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"blueboat-planner-node",children:"BlueBoat Planner Node"})}),"\n",(0,s.jsxs)(n.p,{children:["While the controller node ensures that the BlueBoat can navigate to a single target position, it does ",(0,s.jsx)(n.strong,{children:"not manage missions or sequences of goals"}),"In real-world scenarios, however, we often want our robot to:"]}),"\n",(0,s.jsx)(n.p,{children:"Visit multiple waypoints,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Perform specific actions at each stop (e.g., environmental measurements),"}),"\n",(0,s.jsx)(n.li,{children:"And continue the mission autonomously without manual intervention."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To achieve this, we introduce a ",(0,s.jsx)(n.strong,{children:"planner node"})," whose role is to orchestrate the mission:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It maintains a list of goal positions."}),"\n",(0,s.jsxs)(n.li,{children:["It sends each target to the controller via a ",(0,s.jsx)(n.strong,{children:"ROS 2 service call"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"It listens to a feedback topic (/target_reached) to know when the boat has arrived."}),"\n",(0,s.jsx)(n.li,{children:"It performs an action (e.g., logging, waiting, spawning markers) at each waypoint before moving to the next."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This decoupled design ensures modularity:\nThe planner handles the ",(0,s.jsx)(n.strong,{children:'"what to do"'}),", and the controller takes care of ",(0,s.jsx)(n.strong,{children:'"how to get there"'}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"create-a-new-ros-2-package",children:"Create a new ROS 2 package"}),"\n",(0,s.jsxs)(n.p,{children:["If you haven't already, create a new workspace and a package (e.g., ",(0,s.jsx)(n.code,{children:"blueboat_planner"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/blueboat_ws/src\ncd ~/blueboat_ws/src\nros2 pkg create --build-type ament_python blueboat_planner\n"})}),"\n",(0,s.jsx)(n.p,{children:"Make sure your environment is sourced and you\u2019re using the same workspace you built your BlueBoat simulation in."}),"\n",(0,s.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,s.jsx)(n.p,{children:"After creating the package, your folder should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"blueboat_planner/\n\u251c\u2500\u2500 blueboat_planner\n\u2502   \u2514\u2500\u2500 planner_node.py\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 resource/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the following line to your setup.py under entry_points:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'console_scripts': [\n    'planner_node = blueboat_planner.planner_node:main',\n],\n"})}),"\n",(0,s.jsx)(n.p,{children:"Also make sure to include blueboat_interfaces as a dependency in your package.xml."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"planner-node-function",children:"Planner Node Function"}),"\n",(0,s.jsx)(n.p,{children:"This node:"}),"\n",(0,s.jsx)(n.p,{children:"Sends a sequence of target positions using a ROS 2 service."}),"\n",(0,s.jsx)(n.p,{children:"Waits for the robot to confirm target arrival."}),"\n",(0,s.jsx)(n.p,{children:"Waits 5 seconds to simulate a measurement or action."}),"\n",(0,s.jsx)(n.p,{children:"Spawns a marker at each location."}),"\n",(0,s.jsx)(n.p,{children:"Sends the next target."}),"\n",(0,s.jsx)(n.h3,{id:"planner_nodepy",children:"planner_node.py"}),"\n",(0,s.jsx)(n.p,{children:"Place this file inside blueboat_planner/blueboat_planner/:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import Bool\nfrom blueboat_interfaces.srv import SetTarget\nimport time\nimport subprocess\n\nclass Planner(Node):\n    def __init__(self):\n        super().__init__(\'blueboat_planner\')\n\n        self.client = self.create_client(SetTarget, \'set_target\')\n        while not self.client.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info(\'Warte auf Regler-Service...\')\n\n        self.targets = [[5.0, 0.0], [5.0, 5.0], [0.0, 5.0], [0.0, 0.0]]\n        self.current_target = 0\n        self.waiting_for_target = False\n\n        self.create_subscription(Bool, \'/target_reached\', self.target_callback, 10)\n\n        self.send_next_target()\n\n    def send_next_target(self):\n        if self.current_target >= len(self.targets):\n            self.get_logger().info("Alle Ziele erreicht.")\n            return\n\n        x, y = self.targets[self.current_target]\n        req = SetTarget.Request()\n        req.x = x\n        req.y = y\n        self.waiting_for_target = True\n        self.get_logger().info("moechte Ziel senden...")\n        marker_name = f"marker_{self.current_target}"\n        self.spawn_marker(marker_name, x, y)\n        future = self.client.call_async(req)\n        future.add_done_callback(self.handle_target_response)\n\n    def handle_target_response(self, future):\n        try:\n            result = future.result()\n            if result.accepted:\n                self.get_logger().info(f"Ziel {self.current_target + 1} gesendet.")\n            else:\n                self.get_logger().warn("Ziel wurde nicht akzeptiert.")\n        except Exception as e:\n            self.get_logger().error(f"Service-Aufruf fehlgeschlagen: {e}")\n\n    def target_callback(self, msg):\n        self.get_logger().info(f"Callback empfangen: data={msg.data}, waiting={self.waiting_for_target}")\n        if msg.data and self.waiting_for_target:\n            self.waiting_for_target = False\n            self.perform_action_at_target()\n            self.current_target += 1\n            self.send_next_target()\n\n    def perform_action_at_target(self):\n        self.get_logger().info("Warte 5 Sekunden als Aktion...")\n        time.sleep(5)\n        self.get_logger().info("Aktion abgeschlossen.")\n\n    def spawn_marker(self, name, x, y, z=0.0):\n        sdf_path = "/home/blueboat_sitl/gz_ws/src/marker_model/model.sdf"\n        cmd = [\n            "gz", "service", "-s", "/world/waves/create",\n            "--reqtype", "gz.msgs.EntityFactory",\n            "--reptype", "gz.msgs.Boolean",\n            "--timeout", "2000",\n            "--req", f\'sdf_filename: "{sdf_path}", name: "{name}", pose: {{ position: {{ x: {x}, y: {y}, z: {z} }} }}\'\n        ]\n        subprocess.run(cmd)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = Planner()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"run-the-node",children:"Run the Node"}),"\n",(0,s.jsx)(n.p,{children:"Build and source the workspace:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ~/blueboat_ws\ncolcon build --symlink-install --merge-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DCMAKE_CXX_STANDARD=17\nsource install/setup.bash\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then run the planner node (inside your Docker container):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 run blueboat_planner blueboat_planner\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The node sends a coordinate via the set_target service."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The PID node drives the boat to that position."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"When the /target_reached message is received:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A 5-second pause simulates data collection."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The next target is sent."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"For each point, a visual marker is spawned in Gazebo (red dots)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("img",{src:"/EnviroBotics-Docs/img/Simulation.png",alt:"palnner Node",style:{width:"100%",marginBottom:"1rem"}}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This node allows fully autonomous waypoint missions in the BlueBoat simulation. It demonstrates how ROS 2 services and topics can be used to coordinate multi-step behaviors across nodes."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);