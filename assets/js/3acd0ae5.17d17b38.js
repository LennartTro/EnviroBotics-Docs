"use strict";(self.webpackChunkenviro_botics_summer_school=self.webpackChunkenviro_botics_summer_school||[]).push([[2113],{191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorials/controller node","title":"Adjust you controller","description":"Up to this point, our controller was capable of guiding the BlueBoat to a single fixed target position. While this is a useful starting point, our actual mission requires more complex behavior:","source":"@site/docs/tutorials/controller node.md","sourceDirName":"tutorials","slug":"/tutorials/controller node","permalink":"/EnviroBotics-Docs/docs/tutorials/controller node","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"controller node","title":"Adjust you controller"},"sidebar":"tutorialSidebar","previous":{"title":"Build your own ROS nodes","permalink":"/EnviroBotics-Docs/docs/tutorials/build ROS nodes"},"next":{"title":"Creating a BlueBoat Planner Node","permalink":"/EnviroBotics-Docs/docs/tutorials/planner node"}}');var s=t(4848),l=t(8453);const a={id:"controller node",title:"Adjust you controller"},o="Motivation for Updating the Controller",i={},d=[{value:"Overall Node Structure",id:"overall-node-structure",level:2},{value:"PID Class",id:"pid-class",level:2},{value:"Target Service",id:"target-service",level:2},{value:"Control Logic",id:"control-logic",level:2},{value:"Motor Commands",id:"motor-commands",level:2},{value:"Goal Reached Feedback",id:"goal-reached-feedback",level:2},{value:"Summary Table",id:"summary-table",level:2},{value:"Why Use a Service?",id:"why-use-a-service",level:3},{value:"Example Workflow",id:"example-workflow",level:3},{value:"Summary",id:"summary",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"motivation-for-updating-the-controller",children:"Motivation for Updating the Controller"})}),"\n",(0,s.jsx)(n.p,{children:"Up to this point, our controller was capable of guiding the BlueBoat to a single fixed target position. While this is a useful starting point, our actual mission requires more complex behavior:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The BlueBoat should visit multiple waypoints in sequence."}),"\n",(0,s.jsx)(n.li,{children:"At each waypoint, a specific action should be performed (e.g., measuring water temperature)."}),"\n",(0,s.jsx)(n.li,{children:"The vehicle must hold its position reliably during these operations."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To implement this functionality, we introduce a separate planner node that is responsible for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sending a sequence of target positions to the controller."}),"\n",(0,s.jsx)(n.li,{children:"Waiting until the target is reached."}),"\n",(0,s.jsx)(n.li,{children:"Triggering any desired actions at each waypoint."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This separation of concerns allows the controller to focus purely on navigation and stabilization, while the planner handles mission logic."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom nav_msgs.msg import Odometry\nfrom pymavlink import mavutil\nfrom blueboat_interfaces.srv import SetTarget\nfrom std_msgs.msg import Bool\nimport math\nimport time\n\n\nclass PID:\n    def __init__(self, kp, ki, kd):\n        self.kp, self.ki, self.kd = kp, ki, kd\n        self.prev_error = 0.0\n        self.integral = 0.0\n        self.last_time = None\n\n    def update(self, error):\n        now = time.time()\n        dt = now - self.last_time if self.last_time else 0.1\n        self.last_time = now\n\n        self.integral += error * dt\n        derivative = (error - self.prev_error) / dt if dt > 0 else 0.0\n        self.prev_error = error\n\n        return self.kp * error + self.ki * self.integral + self.kd * derivative\n\n\nclass BlueboatPIDNode(Node):\n    def __init__(self):\n        super().__init__(\'blueboat_pid_regler\')\n\n        # ROS Parameter f\xfcr GPS Modus\n        self.declare_parameter(\'use_gps\', False)\n        self.use_gps = self.get_parameter(\'use_gps\').value\n        \n        # Zielposition (XY oder GPS Koordinaten je nach Modus)\n        self.goal = [0.0, 0.0]  # initiales Ziel\n        # PID-Regler initialisieren\n        self.heading_pid = PID(kp=3.0, ki=0.0, kd=0.4)\n        self.speed_pid = PID(kp=0.1, ki=0.0, kd=0.8)\n\n        # MAVLink-Verbindung\n        self.master = mavutil.mavlink_connection(\'udp:127.0.0.1:14550\')\n        self.master.wait_heartbeat()\n        mode = "GPS" if self.use_gps else "XY"\n        self.get_logger().info(f"Mit MAVLink verbunden - Modus: {mode}")\n\n        # Odometrie abonnieren\n        self.create_subscription(Odometry, \'/model/blueboat/odometry\', self.odom_callback, 10)\n        \n        self.target_service = self.create_service(SetTarget, \'set_target\', self.set_target_callback)\n        # Publisher f\xfcr Ziel-Erreichung\n        self.target_reached_pub = self.create_publisher(Bool, \'/target_reached\', 10)\n        self.goal_reached = False  # merken, ob schon gemeldet\n\n    def set_target_callback(self, request, response):\n        self.goal = [request.x, request.y]\n        if self.use_gps:\n            self.get_logger().info(f"Neues GPS Ziel empfangen: lat={request.x}, lon={request.y}")\n        else:\n            self.get_logger().info(f"Neues XY Ziel empfangen: x={request.x}, y={request.y}")\n        self.goal_reached = False  # zur\xfccksetzen!\n        response.accepted = True\n        time.sleep(5)\n        self.get_logger().info("...abgeschlossen.")\n        return response\n\n    def odom_callback(self, msg):\n        pos = msg.pose.pose.position\n        yaw = self.get_yaw(msg.pose.pose.orientation)\n\n        if self.use_gps:\n            # In GPS mode, assume pos.x = latitude, pos.y = longitude\n            distance, heading_error = self.compute_control_errors_gps(pos.x, pos.y, yaw)\n        else:\n            # In XY mode, use standard XY coordinates\n            distance, heading_error = self.compute_control_errors(pos.x, pos.y, yaw)\n        speed_cmd = self.compute_speed_cmd(distance, heading_error)\n        steer_cmd = self.compute_steer_cmd(heading_error)\n\n        pwm_left, pwm_right = self.compute_motor_pwms(speed_cmd, steer_cmd)\n\n        self.send_pwm(pwm_left, pwm_right)\n        #Zielerreichung publizieren (nur einaml)\n        if distance < 0.3 and not self.goal_reached:\n            self.goal_reached = True\n            self.target_reached_pub.publish(Bool(data=True))\n            self.get_logger().info("Ziel erreicht -> Nachricht gesendet")\n\n        # Ausgabe der aktuellen Werte\n        if self.use_gps:\n            self.get_logger().info(f"GPS: lat={pos.x:.6f}, lon={pos.y:.6f}, yaw={math.degrees(yaw):.1f}\xb0")\n        else:\n            self.get_logger().info(f"XY: x={pos.x:.2f}, y={pos.y:.2f}, yaw={math.degrees(yaw):.1f}\xb0")\n        self.get_logger().info(f"Distanz: {distance:.2f} m | Heading_Fehler: {math.degrees(heading_error):.1f}\xb0")\n        #self.get_logger().info(f"PWM Left: {pwm_left}, PWM Right: {pwm_right}")\n\n    def compute_control_errors(self, x, y, yaw):\n        dx = self.goal[0] - x\n        dy = self.goal[1] - y\n        distance = math.hypot(dx, dy)\n        target_angle = math.atan2(dy, dx)\n        heading_error = (target_angle - yaw + math.pi) % (2 * math.pi) - math.pi\n        return distance, heading_error\n\n    def compute_control_errors_gps(self, current_lat, current_lon, yaw):\n        """Calculate control errors using GPS coordinates (latitude, longitude)"""\n        target_lat = self.goal[0]  # latitude\n        target_lon = self.goal[1]  # longitude\n        \n        distance = self.haversine_distance(current_lat, current_lon, target_lat, target_lon)\n        target_bearing = self.bearing_to_target(current_lat, current_lon, target_lat, target_lon)\n        heading_error = (target_bearing - yaw + math.pi) % (2 * math.pi) - math.pi\n        \n        return distance, heading_error\n\n    def compute_speed_cmd(self, distance, heading_error):\n        if distance < 0.1:\n            self.speed_pid.integral = 0.0\n            return -0.2  # leicht r\xfcckw\xe4rts zum Bremsen\n        if distance > 0.3 and abs(heading_error) > math.radians(90):\n            return 0.0  # auf der Stelle drehen\n        return max(min(-self.speed_pid.update(distance), 1.0), -0.5)\n\n    def compute_steer_cmd(self, heading_error):\n        steer = self.heading_pid.update(heading_error)\n        return max(min(steer, 1.0), -1.0)\n\n\n    def compute_motor_pwms(self, speed_cmd, steer_cmd):\n        base_pwm = 1500\n        power = int(400 * speed_cmd)\n        turn = int(400 * steer_cmd)\n        left = max(min(base_pwm - power - turn, 1900), 1100)\n        right = max(min(base_pwm - power + turn, 1900), 1100)\n        return left, right\n\n    def send_pwm(self, pwm_left, pwm_right):\n        self.master.mav.rc_channels_override_send(\n            self.master.target_system,\n            self.master.target_component,\n            pwm_left, 0, pwm_right, 0,\n            0,# CH5\n            0, # CH6\n            0, 0\n        )\n\n    def get_yaw(self, q):\n        siny_cosp = 2 * (q.w * q.z + q.x * q.y)\n        cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z)\n        return math.atan2(siny_cosp, cosy_cosp)\n\n    def haversine_distance(self, lat1, lon1, lat2, lon2):\n        """Calculate the great circle distance in meters between two GPS points"""\n        R = 6371000  # Earth\'s radius in meters\n        \n        lat1_rad = math.radians(lat1)\n        lat2_rad = math.radians(lat2)\n        delta_lat = math.radians(lat2 - lat1)\n        delta_lon = math.radians(lon2 - lon1)\n        \n        a = (math.sin(delta_lat / 2) ** 2 + \n             math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(delta_lon / 2) ** 2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        \n        return R * c\n\n    def bearing_to_target(self, lat1, lon1, lat2, lon2):\n        """Calculate the bearing (angle) from point 1 to point 2 in radians"""\n        lat1_rad = math.radians(lat1)\n        lat2_rad = math.radians(lat2)\n        delta_lon = math.radians(lon2 - lon1)\n        \n        y = math.sin(delta_lon) * math.cos(lat2_rad)\n        x = (math.cos(lat1_rad) * math.sin(lat2_rad) - \n             math.sin(lat1_rad) * math.cos(lat2_rad) * math.cos(delta_lon))\n        \n        bearing = math.atan2(y, x)\n        return bearing\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = BlueboatPIDNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        node.destroy_node()\n        rclpy.shutdown()\n\n\n'})}),"\n",(0,s.jsx)(n.h1,{id:"pid-controller-node--detailed-explanation",children:"PID Controller Node \u2013 Detailed Explanation"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand the explanation of the PID-based BlueBoat Node"}),(0,s.jsx)(n.h2,{id:"overall-node-structure",children:"Overall Node Structure"}),(0,s.jsx)(n.p,{children:"The script is a ROS 2 node written in Python that controls a simulated BlueBoat. It listens to the boat\u2019s position and orientation and sends motor commands to steer it toward a target."}),(0,s.jsx)(n.h2,{id:"pid-class",children:"PID Class"}),(0,s.jsx)(n.p,{children:"This class implements a standard Proportional-Integral-Derivative controller. It tries to minimize the difference between the current value and the target by calculating:"}),(0,s.jsx)(n.p,{children:"Proportional (P): Immediate error"}),(0,s.jsx)(n.p,{children:"Integral (I): Accumulated past error"}),(0,s.jsx)(n.p,{children:"Derivative (D): Rate of change of error"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class PID:\n    def __init__(self, kp, ki, kd):\n        ...\n"})}),(0,s.jsx)(n.p,{children:"\ud83d\ude80 Node Initialization"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class BlueboatPIDNode(Node):\n    def __init__(self):\n        ...\n"})}),(0,s.jsx)(n.p,{children:"In this section:"}),(0,s.jsx)(n.p,{children:"Connects to MAVLink to control motors"}),(0,s.jsx)(n.p,{children:"Subscribes to odometry data from Gazebo"}),(0,s.jsx)(n.p,{children:"Provides a service for setting new target positions"}),(0,s.jsx)(n.p,{children:"Publishes a message when the goal is reached"}),(0,s.jsx)(n.h2,{id:"target-service",children:"Target Service"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.target_service = self.create_service(SetTarget, 'set_target', self.set_target_callback)\n"})}),(0,s.jsx)(n.p,{children:"This allows other nodes (e.g., a GUI or script) to set a target position (x, y) for the BlueBoat to navigate to."}),(0,s.jsx)(n.p,{children:"\ud83d\udef0\ufe0f Odometry Subscriber"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.create_subscription(Odometry, '/model/blueboat/odometry', self.odom_callback, 10)\n"})}),(0,s.jsx)(n.p,{children:"Subscribes to the boat's real-time position and orientation in the simulation."}),(0,s.jsx)(n.h2,{id:"control-logic",children:"Control Logic"}),(0,s.jsx)(n.p,{children:"The odom_callback() receives new odometry data and:"}),(0,s.jsx)(n.p,{children:"Computes control errors between current and goal positions"}),(0,s.jsx)(n.p,{children:"Uses PID controllers to calculate speed and steering"}),(0,s.jsx)(n.p,{children:"Translates results to motor PWM signals"}),(0,s.jsx)(n.p,{children:"Sends commands via MAVLink"}),(0,s.jsx)(n.h2,{id:"motor-commands",children:"Motor Commands"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def send_pwm(self, pwm_left, pwm_right):\n    self.master.mav.rc_channels_override_send(...)\n"})}),(0,s.jsx)(n.p,{children:"This command overrides the throttle of left and right motors using MAVLink."}),(0,s.jsx)(n.h2,{id:"goal-reached-feedback",children:"Goal Reached Feedback"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.target_reached_pub.publish(Bool(data=True))\n"})}),(0,s.jsx)(n.p,{children:"Once the boat reaches the target within a 30\u202fcm threshold, a message is published on /target_reached. Other systems can react to that (e.g., start logging, load next waypoint, etc.)."}),(0,s.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Section"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"PID"})," class"]}),(0,s.jsx)(n.td,{children:"Controls speed & heading corrections"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"odom_callback()"})}),(0,s.jsx)(n.td,{children:"Runs every time new pose info is received"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"compute_*()"})," functions"]}),(0,s.jsx)(n.td,{children:"Handle direction, distance, speed, and motor power calculations"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"send_pwm()"})}),(0,s.jsx)(n.td,{children:"Sends left/right PWM signals to control movement"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"set_target_callback()"})}),(0,s.jsx)(n.td,{children:"Service handler for receiving new target positions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_reached_pub"})}),(0,s.jsx)(n.td,{children:"Publishes once the BlueBoat is near the target (within 0.3\u202fm threshold)"})]})]})]})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"What is a Position Service in ROS 2?"}),(0,s.jsxs)(n.p,{children:["In this context, a ",(0,s.jsx)(n.strong,{children:"ROS 2 service"})," is used to ",(0,s.jsx)(n.strong,{children:"send target coordinates (x, y)"})," to the BlueBoat at runtime."]}),(0,s.jsxs)(n.p,{children:["Unlike publishing to a topic (which is one-way), a service in ROS follows a ",(0,s.jsx)(n.strong,{children:"request/response"})," pattern:"]}),(0,s.jsx)(n.p,{children:"Client \u21e8 Service \u21e8 Response"}),(0,s.jsx)(n.p,{children:"This means:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Another node (e.g. a GUI, script, or mission planner) sends a ",(0,s.jsx)(n.strong,{children:"target position request"})]}),"\n",(0,s.jsxs)(n.li,{children:["Your PID node ",(0,s.jsx)(n.strong,{children:"receives"})," it and updates its internal goal coordinates"]}),"\n",(0,s.jsxs)(n.li,{children:["It optionally sends back a ",(0,s.jsx)(n.strong,{children:"confirmation"})]}),"\n"]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"why-use-a-service",children:"Why Use a Service?"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic control"}),": You can update the boat\u2019s target anytime without restarting anything."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Predictable interaction"}),': The request/response pattern gives feedback (e.g., "Target accepted").']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encapsulation"}),": The PID logic doesn\u2019t need to know where the request came from."]}),"\n"]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"example-workflow",children:"Example Workflow"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Some external node runs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'ros2 service call /set_target blueboat_interfaces/srv/SetTarget "{x: 5.0, y: 2.0}"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Your node handles it with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.target_service = self.create_service(SetTarget, 'set_target', self.set_target_callback)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inside the callback:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def set_target_callback(self, request, response):\n    self.goal = [request.x, request.y]\n    response.accepted = True\n    return response\n"})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Part"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SetTarget.srv"})}),(0,s.jsxs)(n.td,{children:["Defines the message structure (",(0,s.jsx)(n.code,{children:"x"}),", ",(0,s.jsx)(n.code,{children:"y"}),", ",(0,s.jsx)(n.code,{children:"accepted"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/set_target"})}),(0,s.jsx)(n.td,{children:"The name of the service used for calling"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"create_service"})}),(0,s.jsxs)(n.td,{children:["Binds the request handler (",(0,s.jsx)(n.code,{children:"set_target_callback"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"goal"})," variable"]}),(0,s.jsx)(n.td,{children:"Internally stores the new coordinates"})]})]})]}),(0,s.jsx)(n.p,{children:"This approach allows other ROS 2 components to navigate the BlueBoat on demand \u2013 ideal for interactive or autonomous missions."})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},l=r.createContext(s);function a(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);