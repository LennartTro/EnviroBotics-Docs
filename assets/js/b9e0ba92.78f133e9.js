"use strict";(self.webpackChunkenviro_botics_summer_school=self.webpackChunkenviro_botics_summer_school||[]).push([[9537],{3970:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/build ROS nodes","title":"Build your own ROS nodes","description":"To control the BlueBoat in the simulation (e.g., moving it to a certain position), you\u2019ll typically write custom ROS 2 nodes. These nodes allow you to subscribe to sensor data, process it (e.g., with a control algorithm), and publish commands to actuators.","source":"@site/docs/tutorials/build ROS nodes.md","sourceDirName":"tutorials","slug":"/tutorials/build ROS nodes","permalink":"/EnviroBotics-Docs/docs/tutorials/build ROS nodes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build ROS nodes","title":"Build your own ROS nodes"},"sidebar":"tutorialSidebar","previous":{"title":"Starting simulation","permalink":"/EnviroBotics-Docs/docs/tutorials/start simulation"},"next":{"title":"Adjust you controller","permalink":"/EnviroBotics-Docs/docs/tutorials/controller node"}}');var o=s(4848),r=s(8453);const i={id:"build ROS nodes",title:"Build your own ROS nodes"},l="Writing custom ROS 2 nodes",a={},d=[{value:"What is what?",id:"what-is-what",level:2},{value:"What is a ROS 2 node?",id:"what-is-a-ros-2-node",level:3},{value:"What is a ROS 2 Package?",id:"what-is-a-ros-2-package",level:3},{value:"How does a package relate to nodes?",id:"how-does-a-package-relate-to-nodes",level:3},{value:"2 Step-by-Step: From Python File to Executable Node",id:"2-step-by-step-from-python-file-to-executable-node",level:2},{value:"Step 1 \u2013 Create a Python Package",id:"step-1--create-a-python-package",level:3},{value:"Step 2 \u2013 Add Your Node Script",id:"step-2--add-your-node-script",level:3},{value:"Step 3 \u2013 Update setup.py",id:"step-3--update-setuppy",level:3},{value:"Step 4 \u2013 Building and Running your node",id:"step-4--building-and-running-your-node",level:3},{value:"Customize your node:",id:"customize-your-node",level:3},{value:"And build again:",id:"and-build-again",level:3},{value:"\ud83d\udea6 What this Node Does",id:"-what-this-node-does",level:3},{value:"\ud83e\udde0 Core Concepts",id:"-core-concepts",level:3},{value:"\ud83d\udd01 Control Logic",id:"-control-logic",level:3},{value:"\ud83c\udfaf Fixed Goal",id:"-fixed-goal",level:3},{value:"See what your node does",id:"see-what-your-node-does",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"writing-custom-ros-2-nodes",children:"Writing custom ROS 2 nodes"})}),"\n",(0,o.jsxs)(n.p,{children:["To control the BlueBoat in the simulation (e.g., moving it to a certain position), you\u2019ll typically write ",(0,o.jsx)(n.strong,{children:"custom ROS 2 nodes"}),". These nodes allow you to subscribe to sensor data, process it (e.g., with a control algorithm), and publish commands to actuators."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"what-is-what",children:"What is what?"}),"\n",(0,o.jsx)(n.h3,{id:"what-is-a-ros-2-node",children:"What is a ROS 2 node?"}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"ROS 2 node"})," is a single, executable program in a distributed robotic system that communicates with other nodes using topics, services, or actions."]}),"\n",(0,o.jsx)(n.p,{children:"Each node can:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Subscribe to topics (receive data),"}),"\n",(0,o.jsx)(n.li,{children:"Publish to topics (send data),"}),"\n",(0,o.jsx)(n.li,{children:"Provide services (blocking calls),"}),"\n",(0,o.jsx)(n.li,{children:"Use parameters (for tuning),"}),"\n",(0,o.jsx)(n.li,{children:"And more."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Nodes are usually written in ",(0,o.jsx)(n.strong,{children:"Python"})," or ",(0,o.jsx)(n.strong,{children:"C++"}),". For simplicity, we will use ",(0,o.jsx)(n.strong,{children:"Python"})," in our Summer School."]}),"\n",(0,o.jsx)(n.h3,{id:"what-is-a-ros-2-package",children:"What is a ROS 2 Package?"}),"\n",(0,o.jsx)(n.p,{children:"A ROS 2 package is the basic unit of software in the ROS 2 ecosystem. It acts as a container for related code, such as:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"One or more nodes"}),"\n",(0,o.jsx)(n.li,{children:"Message or service definitions"}),"\n",(0,o.jsx)(n.li,{children:"Configuration files (e.g., launch, params)"}),"\n",(0,o.jsx)(n.li,{children:"Metadata (setup.py, package.xml)"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Think of it as a folder that bundles everything you need to build, run, and share a ROS-based component. A node needs to be ",(0,o.jsx)(n.strong,{children:"inside a package"})," to be usable with ROS tools like ",(0,o.jsx)(n.code,{children:"ros2 run"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"how-does-a-package-relate-to-nodes",children:"How does a package relate to nodes?"}),"\n",(0,o.jsx)(n.p,{children:"A node is an executable Python (or C++) script."}),"\n",(0,o.jsx)(n.p,{children:"A package provides the environment to organize, build, and install that node."}),"\n",(0,o.jsx)(n.p,{children:"When you run ros2 run my_package my_node, ROS looks inside the package to find and execute the node."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"2-step-by-step-from-python-file-to-executable-node",children:"2 Step-by-Step: From Python File to Executable Node"}),"\n",(0,o.jsx)(n.h3,{id:"step-1--create-a-python-package",children:"Step 1 \u2013 Create a Python Package"}),"\n",(0,o.jsxs)(n.p,{children:["Open a terminal in your workspace's ",(0,o.jsx)(n.code,{children:"src"})," folder - we are working inside the Docker container in ",(0,o.jsx)(n.code,{children:"gz_ws/"})," folder:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",metastring:"{8}",children:'home/\n\u251c\u2500\u2500 Summer_School\n\u2502   |\u2500\u2500 gazebosim_blueboat_ardupilot_sitl/\n|   |       |\u2500\u2500 blueboat_sitl/\n|   |       |       |\u2500\u2500 ....\n|   |       |       \u2514\u2500\u2500 ...\n|   |       |\u2500\u2500 gz_ws/\n|   |       |    |\u2500\u2500 src/\n|   |       |    |    |\u2500\u2500 "NODES"\n|   |       |    |    \u2514\u2500\u2500 ...\n|   |       |    |\u2500\u2500 (install/)\n|   |       |    |\u2500\u2500 (build/)\n|   |       |    \u2514\u2500\u2500 ...\n|   |       |\u2500\u2500  SITL_Models/\n|   |       \u2514\u2500\u2500 README.md\n|   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can use this command to go there:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/gz_ws/src\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here you can create a ne Package with the name ",(0,o.jsx)(n.code,{children:"blueboat_controller"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_python blueboat_controller\n"})}),"\n",(0,o.jsxs)(n.p,{children:["That will create the package structure inside you ",(0,o.jsx)(n.code,{children:"src/"}),"-folder:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"blueboat_controller/\n\u251c\u2500\u2500 blueboat_controller/\n|       \u2514\u2500\u2500 __init__.py \n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 resource/\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-2--add-your-node-script",children:"Step 2 \u2013 Add Your Node Script"}),"\n",(0,o.jsxs)(n.p,{children:["Create your own Python file in the ",(0,o.jsx)(n.code,{children:"blueboat_controller/"})," directory:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"touch blueboat_controller/blueboat_controller/pid_controller.py\n"})}),"\n",(0,o.jsx)(n.p,{children:"Paste your ROS 2 node code here (e.g., a simple PID controller).\nMake sure the first line of the script is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\n"})}),"\n",(0,o.jsx)(n.p,{children:"Also, don\u2019t forget to make the script executable:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"chmod +x blueboat_controller/blueboat_controller/pid_controller.py\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or do an right-click on the file pid_controller.py --\x3e Properties...."}),"\n",(0,o.jsx)(n.h3,{id:"step-3--update-setuppy",children:"Step 3 \u2013 Update setup.py"}),"\n",(0,o.jsx)(n.p,{children:"Open the generated setup.py and modify it like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"{20}",children:"from setuptools import setup\n\npackage_name = 'blueboat_controller'\n\nsetup(\n    name=package_name,\n    version='0.1.0',\n    packages=[package_name],\n    data_files=[\n        ('share/' + package_name, ['package.xml']),\n    ],\n    install_requires=['setuptools'],\n    zip_safe=True,\n    maintainer='Your Name',\n    maintainer_email='your@email.com',\n    description='Custom controller node for BlueBoat',\n    license='MIT',\n    entry_points={\n        'console_scripts': [\n            'pid_controller = blueboat_controller.pid_controller:main',\n        ],\n    },\n)\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"The entry in console_scripts allows ROS 2 to run the node with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ros2 run blueboat_controller pid_controller\n"})}),"\n",(0,o.jsx)(n.p,{children:"But first build..."}),"\n",(0,o.jsx)(n.h3,{id:"step-4--building-and-running-your-node",children:"Step 4 \u2013 Building and Running your node"}),"\n",(0,o.jsx)(n.p,{children:"Build:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd ~/gz_ws\ncolcon build\n"})}),"\n",(0,o.jsx)(n.p,{children:"After building, always source your workspace:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\n"})}),"\n",(0,o.jsx)(n.p,{children:"and run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"\nros2 run blueboat_controller pid_controller\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will start your custom node. In this case all it does is..."}),"\n",(0,o.jsx)(n.h3,{id:"customize-your-node",children:"Customize your node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom nav_msgs.msg import Odometry\nfrom pymavlink import mavutil\nimport math\nimport time\n\n\nclass PID:\n    def __init__(self, kp, ki, kd):\n        self.kp, self.ki, self.kd = kp, ki, kd\n        self.prev_error = 0.0\n        self.integral = 0.0\n        self.last_time = time.time()\n\n    def compute(self, error):\n        now = time.time()\n        dt = now - self.last_time\n        self.last_time = now\n\n        self.integral += error * dt\n        derivative = (error - self.prev_error) / dt if dt > 0 else 0.0\n        self.prev_error = error\n\n        return self.kp * error + self.ki * self.integral + self.kd * derivative\n\n\nclass SimplePIDNode(Node):\n    def __init__(self):\n        super().__init__('simple_blueboat_pid')\n\n        self.goal = [3.0, 2.0]  # Feste Zielkoordinate\n\n        # PID-Regler\n        self.heading_pid = PID(3.0, 0.0, 0.3)\n        self.speed_pid = PID(0.2, 0.0, 0.5)\n\n        # MAVLink Verbindung aufbauen\n        self.master = mavutil.mavlink_connection('udp:127.0.0.1:14550')\n        self.master.wait_heartbeat()\n        self.get_logger().info(\"Verbunden mit MAVLink\")\n\n        # ROS Subscriber\n        self.create_subscription(Odometry, '/model/blueboat/odometry', self.odom_callback, 10)\n\n    def odom_callback(self, msg):\n        pos = msg.pose.pose.position\n        yaw = self.get_yaw(msg.pose.pose.orientation)\n\n        dx = self.goal[0] - pos.x\n        dy = self.goal[1] - pos.y\n        distance = math.hypot(dx, dy)\n\n        target_angle = math.atan2(dy, dx)\n        heading_error = (target_angle - yaw + math.pi) % (2 * math.pi) - math.pi\n\n        steer_cmd = self.heading_pid.compute(heading_error)\n        speed_cmd = self.speed_pid.compute(distance)\n\n        # Ziel erreicht?\n        if distance < 0.3:\n            speed_cmd = -0.2  # leicht r\xfcckw\xe4rts bremsen\n\n        pwm_left, pwm_right = self.compute_pwm(speed_cmd, steer_cmd)\n        self.send_pwm(pwm_left, pwm_right)\n\n        self.get_logger().info(f\"Distanz: {distance:.2f} m | Heading Error: {math.degrees(heading_error):.1f}\xb0\")\n\n    def compute_pwm(self, speed_cmd, steer_cmd):\n        base_pwm = 1500\n        power = int(400 * max(min(speed_cmd, 1.0), -1.0))\n        turn = int(400 * max(min(steer_cmd, 1.0), -1.0))\n\n        pwm_left = max(min(base_pwm - power - turn, 1900), 1100)\n        pwm_right = max(min(base_pwm - power + turn, 1900), 1100)\n        return pwm_left, pwm_right\n\n    def send_pwm(self, left, right):\n        self.master.mav.rc_channels_override_send(\n            self.master.target_system,\n            self.master.target_component,\n            left, 0, right, 0,\n            0, 0, 0, 0\n        )\n\n    def get_yaw(self, q):\n        siny_cosp = 2 * (q.w * q.z + q.x * q.y)\n        cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z)\n        return math.atan2(siny_cosp, cosy_cosp)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = SimplePIDNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        node.destroy_node()\n        rclpy.shutdown()\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"and-build-again",children:"And build again:"}),"\n",(0,o.jsx)(n.p,{children:"Build:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'cd ~/gz_ws\ncolcon build --symlink-install --merge-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DCMAKE_CXX_STANDARD=17"\n'})}),"\n",(0,o.jsx)(n.p,{children:"After building, always source your workspace:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\n"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Explanation of the simple BlueBoat PID Node"}),(0,o.jsxs)(n.p,{children:["This minimal ROS 2 node drives the simulated BlueBoat toward a ",(0,o.jsx)(n.strong,{children:"fixed target position"})," using a basic PID controller for both heading and speed."]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h3,{id:"-what-this-node-does",children:"\ud83d\udea6 What this Node Does"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Subscribes to the boat's ",(0,o.jsx)(n.strong,{children:"odometry"})," in simulation"]}),"\n",(0,o.jsxs)(n.li,{children:["Computes the ",(0,o.jsx)(n.strong,{children:"distance"})," and ",(0,o.jsx)(n.strong,{children:"heading angle"})," to the fixed target"]}),"\n",(0,o.jsxs)(n.li,{children:["Uses ",(0,o.jsx)(n.strong,{children:"PID control"})," to calculate motor signals"]}),"\n",(0,o.jsxs)(n.li,{children:["Sends ",(0,o.jsx)(n.strong,{children:"PWM commands via MAVLink"})," to steer and drive the boat"]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h3,{id:"-core-concepts",children:"\ud83e\udde0 Core Concepts"}),(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Component"}),(0,o.jsx)(n.th,{children:"Purpose"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"PID"})," class"]}),(0,o.jsx)(n.td,{children:"Calculates control output using proportional, integral, and derivative parts"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"odom_callback()"})}),(0,o.jsx)(n.td,{children:"Reacts to new position data from Gazebo"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"compute_pwm()"})}),(0,o.jsx)(n.td,{children:"Converts speed and steering into left/right motor commands"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"send_pwm()"})}),(0,o.jsx)(n.td,{children:"Sends motor signals directly via MAVLink"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"get_yaw()"})}),(0,o.jsx)(n.td,{children:"Extracts boat orientation from quaternion"})]})]})]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h3,{id:"-control-logic",children:"\ud83d\udd01 Control Logic"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Compute distance and heading error to the target"}),"\n",(0,o.jsxs)(n.li,{children:["Use two PID controllers:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["One for ",(0,o.jsx)(n.strong,{children:"heading correction"})]}),"\n",(0,o.jsxs)(n.li,{children:["One for ",(0,o.jsx)(n.strong,{children:"speed adjustment"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Translate results into PWM values"}),"\n",(0,o.jsx)(n.li,{children:"Command motors via MAVLink"}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h3,{id:"-fixed-goal",children:"\ud83c\udfaf Fixed Goal"}),(0,o.jsx)(n.p,{children:"The goal is defined statically in the code:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"self.goal = [3.0, 2.0]\n"})})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"see-what-your-node-does",children:"See what your node does"}),"\n",(0,o.jsx)(n.p,{children:"Before starting your ROS 2 node, make sure that the vehicle is armed in QGroundControl. Otherwise, your BlueBoat won\u2019t respond to motor commands, even though your node is running correctly."}),"\n",(0,o.jsx)(n.p,{children:"\u2705 Arming the Vehicle in QGroundControl"}),"\n",(0,o.jsx)(n.p,{children:"1 Open QGroundControl (QGC)"}),"\n",(0,o.jsx)(n.p,{children:'2 Ensure it is connected to the simulated vehicle via MAVLink (Ready to Fly in the top bar) - click on "Ready to Fly"'}),"\n",(0,o.jsx)(n.p,{children:'3 Click the "Arm" button (top left)'}),"\n",(0,o.jsx)(n.p,{children:"3 Slide or hold the spacebar to confirm arming"}),"\n",(0,o.jsxs)("div",{style:{display:"flex",gap:"1rem",justifyContent:"space-between",flexWrap:"wrap"},children:[(0,o.jsx)("div",{style:{flex:"1 1 48%"},children:(0,o.jsx)("img",{src:"/EnviroBotics-Docs/img/Arming2.png",alt:"QGroundControl arm slider",style:{width:"100%",borderRadius:"8px"}})}),(0,o.jsx)("div",{style:{flex:"1 1 48%"},children:(0,o.jsx)("img",{src:"/EnviroBotics-Docs/img/Arming1.png",alt:"QGroundControl armed status",style:{width:"100%",borderRadius:"8px"}})})]}),"\n",(0,o.jsx)(n.p,{children:"Once the vehicle is armed, run your Terminal and controller node:"}),"\n",(0,o.jsx)(n.p,{children:"With your new customized node, your BlueBoat is able to navigate to the goal ([3.0 , 2.0]) that you defined.\nTo see what happens, watch your Gazebo simulation and run you node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ros2 run blueboat_controller pid_controller\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"The Boat is approaching the destination and you get an output of values for distance and heading error in your terminal."}),"\n",(0,o.jsxs)("div",{style:{display:"flex",gap:"1rem",justifyContent:"space-between",flexWrap:"wrap"},children:[(0,o.jsxs)("div",{style:{flex:"1 1 48%"},children:[(0,o.jsx)("h4",{children:"Gazebo simulation:"}),(0,o.jsx)("img",{src:"/EnviroBotics-Docs/img/Gazebo.png",alt:"gazebo",style:{width:"100%",borderRadius:"8px"}})]}),(0,o.jsxs)("div",{style:{flex:"1 1 48%"},children:[(0,o.jsx)("h4",{children:"Terminal:"}),(0,o.jsx)("img",{src:"/EnviroBotics-Docs/img/Terminal.png",alt:"terminal",style:{width:"100%",borderRadius:"8px"}})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Your BlueBoat can now navigate to a fixed destination \u2014 great progress!"}),"\n",(0,o.jsx)(n.p,{children:"But in a real-world scenario, we often want more:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Multiple waypoints, automated actions at each stop, and full mission control."})}),"\n",(0,o.jsx)(n.p,{children:"To make this possible, we\u2019ll build a second node \u2014 a planner \u2014 that manages goal sequences and coordinates with your controller."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);